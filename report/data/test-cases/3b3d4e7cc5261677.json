{"uid":"3b3d4e7cc5261677","name":"test_getToken[casedata1]","fullName":"testcase.test_usertoken_csv.TestUserManage#test_getToken","historyId":"297f55a7ea7e9f9e2f2d5c53adcd6d0b","time":{"start":1716537449625,"stop":1716537449649,"duration":24},"status":"failed","statusMessage":"AssertionError: assert '41003' == '41001'\n  \n  - 41001\n  ?     ^\n  + 41003\n  ?     ^","statusTrace":"self = <testcase.test_usertoken_csv.TestUserManage object at 0x0000026619724F10>\ncasedata = {'appid': '', 'assertCode': '41003', 'grant_type': 'client_credential', 'method': 'get', ...}\n\n    @pytest.mark.smoke\n    # @pytest.mark.parametrize('casedata',read_testdata('./testcase/test_getToken.yaml'))\n    @pytest.mark.parametrize('casedata',readCsv('./csv/datadrive.csv'))\n    def test_getToken(self,casedata):\n        print(casedata)\n        print(type(casedata))\n        url = casedata['url']\n        print(url)\n        method = casedata['method']\n        grant_type = casedata['grant_type']\n        appid = casedata['appid']\n        secret = casedata['secret']\n        assertCode = casedata['assertCode']\n    \n        datas = {\n            'grant_type': grant_type,\n            'appid': appid,\n            'secret': secret\n        }\n    \n        res = RequestUtil().all_send_request(method=method,url=url, params=datas)\n        result = res.json()\n        if \"access_token\" in res.text:\n            access_token = jsonpath.jsonpath(result, '$.access_token')\n            # 获取access_token，写入到yaml文件\n            dict = {'access_token': access_token[0]}\n            write_yaml(dict)\n            assert assertCode == '200'\n        else:\n>           assert assertCode == '41001'\nE           AssertionError: assert '41003' == '41001'\nE             \nE             - 41001\nE             ?     ^\nE             + 41003\nE             ?     ^\n\ntestcase\\test_usertoken_csv.py:41: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1716537449240,"stop":1716537449240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"clearyaml","time":{"start":1716537449240,"stop":1716537449242,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"base_url","time":{"start":1716537449240,"stop":1716537449240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_usertoken_csv"},{"name":"subSuite","value":"TestUserManage"},{"name":"host","value":"Lenevo"},{"name":"thread","value":"44540-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_usertoken_csv"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"casedata","value":"{'method': 'get', 'url': 'https://api.weixin.qq.com/cgi-bin/token?', 'grant_type': 'client_credential', 'appid': '', 'secret': 'd16004d19f8a85d02b1d9c5e93f06bc2', 'assertCode': '41003'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["smoke"]},"source":"3b3d4e7cc5261677.json","parameterValues":["{'method': 'get', 'url': 'https://api.weixin.qq.com/cgi-bin/token?', 'grant_type': 'client_credential', 'appid': '', 'secret': 'd16004d19f8a85d02b1d9c5e93f06bc2', 'assertCode': '41003'}"]}